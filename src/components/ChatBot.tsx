'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { ProductManager } from '@/components/ProductManager';
import { TypewriterText } from '@/components/TypewriterText';
import { apiService } from '@/lib/api';
import { ChatMessage, BotMessageResponse } from '@/types/api';
import { toast } from 'sonner';
import { Plus, Package, ChefHat, Brain, BarChart3, Search } from 'lucide-react';

interface ChatBotProps {
  userId: string;
  username?: string | null;
  showProductSidebar?: boolean;
  onProductSidebarChange?: (show: boolean) => void;
  onSidebarWidthChange?: (width: number) => void;
  warehouseStats?: {
    totalCost: number;
    totalWaste: number;
    productCount: number;
    expiringCount?: number;
  };
}

export function ChatBot({ userId, username, showProductSidebar = false, onProductSidebarChange, onSidebarWidthChange, warehouseStats }: ChatBotProps) {
  const welcomeMessage = username 
    ? `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã\n\nü§ñ –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –ò–ò!\n\n–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ:\n‚Ä¢ "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"\n‚Ä¢ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫–ª–∞–¥"\n‚Ä¢ "–ü–æ—Å–æ–≤–µ—Ç—É–π —Ä–µ—Ü–µ–ø—Ç"\n‚Ä¢ "–ß—Ç–æ –∫—É–ø–∏—Ç—å?"\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!`
    : '–ü—Ä–∏–≤–µ—Ç! üëã\n\nü§ñ –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –ò–ò!\n\n–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ:\n‚Ä¢ "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"\n‚Ä¢ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫–ª–∞–¥"\n‚Ä¢ "–ü–æ—Å–æ–≤–µ—Ç—É–π —Ä–µ—Ü–µ–ø—Ç"\n‚Ä¢ "–ß—Ç–æ –∫—É–ø–∏—Ç—å?"\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!';

  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '0',
      text: welcomeMessage,
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isConnected, setIsConnected] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  const [sidebarWidth, setSidebarWidth] = useState(350); // 350px –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [isResizing, setIsResizing] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏ input
  const [isMultiline, setIsMultiline] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ AI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const aiCommands = [
    '/ask —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ?',
    '/ask —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?',
    '/ask –∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥?',
    '/ask –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π —Å–∫–ª–∞–¥',
    '/ask –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–∫–æ—Ä–æ –∏—Å–ø–æ—Ä—Ç—è—Ç—Å—è?',
    '/ask —Å–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
    '/ask —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏',
    '/ask —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Ç—Ö–æ–¥–∞–º–∏?',
    '/products',
    '/analytics',
    '/optimize',
    '/brain'
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const showAIDemo = () => {
    const demoMessage: ChatMessage = {
      id: Date.now().toString(),
      text: 'ü§ñ –ò–ò –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π —Å–∫–ª–∞–¥"\n‚Ä¢ "–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"\n‚Ä¢ "–ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö?"\n\n–ò–ò –≤–∏–¥–∏—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!',
      isUser: false,
      timestamp: new Date(),
      isAI: true,
      isTyping: true,
    };
    
    setMessages(prev => [...prev, demoMessage]);
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
  const handleTypingComplete = (messageId: string) => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId ? { ...msg, isTyping: false } : msg
      )
    );
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
  const handleTypingUpdate = () => {
    scrollToBottom();
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
  const adjustTextareaHeight = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 128); // max-h-32 = 128px
      textarea.style.height = newHeight + 'px';
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç—å (–±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
      setIsMultiline(newHeight > 52); // min-h-[52px]
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    adjustTextareaHeight();
  }, [inputMessage]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
  };

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isResizing) return;
      
      // –î–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å—á–∏—Ç–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
      const newWidth = window.innerWidth - e.clientX;
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Ç 300px –¥–æ 600px
      const clampedWidth = Math.min(Math.max(newWidth, 300), 600);
      setSidebarWidth(clampedWidth);
      onSidebarWidthChange?.(clampedWidth);
    };

    const handleMouseUp = () => {
      setIsResizing(false);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    };

    if (isResizing) {
      document.body.style.cursor = 'col-resize';
      document.body.style.userSelect = 'none';
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    };
  }, [isResizing]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const checkConnection = async () => {
      try {
        const result = await apiService.healthCheck();
        setIsConnected(result.success);
        
        if (!result.success) {
          console.warn('Backend –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', result.error);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        setIsConnected(false);
      }
    };
    
    checkConnection();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const interval = setInterval(checkConnection, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(interval);
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, userId:', userId);

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: inputMessage.trim(),
      isUser: true,
      timestamp: new Date(),
    };

    const loadingMessage: ChatMessage = {
      id: (Date.now() + 1).toString(),
      text: '–ü–µ—á–∞—Ç–∞—é...',
      isUser: false,
      timestamp: new Date(),
      isLoading: true,
    };

    setMessages(prev => [...prev, userMessage, loadingMessage]);
    setInputMessage('');
    setIsLoading(true);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É textarea –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
    setIsMultiline(false);

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É...');
      const result = await apiService.sendBotMessage(userMessage.text);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–æ—Ç–∞:', result);

      if (result.success && result.data) {
        // –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –±–æ—Ç–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è AI –æ—Ç–≤–µ—Ç–∞–º–∏, –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        const isSystemCommand = userMessage.text.startsWith('/') && 
                               !userMessage.text.startsWith('/ask');
        const isProductAddition = userMessage.text.includes('–¥–æ–±–∞–≤') && 
                                (userMessage.text.includes('–∫–≥') || userMessage.text.includes('—Ä—É–±'));
        
        const isAIResponse = !isSystemCommand && !isProductAddition;
        
        const botResponse: ChatMessage = {
          id: result.data.id.toString(),
          text: result.data.response,
          isUser: false,
          timestamp: new Date(result.data.timestamp),
          isTyping: true, // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
          isAI: isAIResponse, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ AI –æ—Ç–≤–µ—Ç
        };

        setMessages(prev => 
          prev.map(msg => 
            msg.id === loadingMessage.id ? botResponse : msg
          )
        );
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞');
      }
    } catch (error) {
      const errorMessage: ChatMessage = {
        id: (Date.now() + 2).toString(),
        text: '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        isUser: false,
        timestamp: new Date(),
      };

      setMessages(prev => 
        prev.map(msg => 
          msg.id === loadingMessage.id ? errorMessage : msg
        )
      );

      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      setIsConnected(false);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="flex h-full w-full bg-gray-800 relative">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      <div 
        className="flex flex-col h-full bg-gray-800 transition-all duration-300 ease-in-out"
        style={{
          width: showProductSidebar ? `calc(100% - ${sidebarWidth}px)` : '100%'
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
        <div className="flex-shrink-0 px-6 py-4 bg-gray-800">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={`w-2.5 h-2.5 rounded-full ${
                isConnected ? 'bg-emerald-400' : 'bg-red-400'
              }`} />
              <span className="text-gray-300 text-sm font-medium">Smart Assistant</span>
            </div>
            
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ */}
            {warehouseStats && (
              <div className="flex items-center gap-4 text-sm bg-gray-800/50 rounded-lg px-3 py-2 border border-gray-700/30">
                {warehouseStats.productCount > 0 ? (
                  <>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                      <span className="text-gray-400">–°–∫–ª–∞–¥:</span>
                      <span className="text-gray-200 font-medium">
                        {isNaN(warehouseStats.totalCost) ? 0 : Math.round(warehouseStats.totalCost)}‚ÇΩ
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-orange-400 rounded-full"></div>
                      <span className="text-gray-400">–û—Ç—Ö–æ–¥—ã:</span>
                      <span className="text-orange-400 font-medium">
                        {isNaN(warehouseStats.totalWaste) ? 0 : (Math.round(warehouseStats.totalWaste * 10) / 10)}–∫–≥
                      </span>
                    </div>
                    {warehouseStats.expiringCount && warehouseStats.expiringCount > 0 && (
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>
                        <span className="text-gray-400">–ò—Å—Ç–µ–∫–∞–µ—Ç:</span>
                        <span className="text-red-400 font-medium">
                          {warehouseStats.expiringCount}
                        </span>
                      </div>
                    )}
                    <div className="flex items-center gap-2">
                      <Package size={14} className="text-gray-400" />
                      <span className="text-gray-400">{warehouseStats.productCount || 0}</span>
                    </div>
                  </>
                ) : (
                  <div className="flex items-center gap-2">
                    <Package size={14} className="text-gray-500" />
                    <span className="text-gray-500 text-xs">–°–∫–ª–∞–¥ –ø—É—Å—Ç</span>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="flex-1 overflow-hidden">
          <ScrollArea className="h-full px-6 py-0">
            <div className="space-y-6 py-6">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.isUser ? 'justify-end' : 'justify-start'} animate-in slide-in-from-bottom-3 fade-in duration-300`}
                >
                  <div
                    className={`max-w-2xl ${
                      message.isUser
                        ? 'bg-blue-600 text-white rounded-2xl px-4 py-3'
                        : 'text-gray-200 py-2'
                    }`}
                  >
                    {/* AI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                    {!message.isUser && message.isAI && (
                      <div className="flex items-center gap-2 mb-2 text-xs text-blue-400">
                        <Brain size={12} />
                        <span>–û—Ç–≤–µ—Ç –æ—Ç –ò–ò</span>
                      </div>
                    )}
                    <div className="whitespace-pre-wrap text-base">
                      {message.isLoading ? (
                        <div className="flex items-center gap-2 text-gray-400">
                          <div className="flex gap-1">
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce [animation-delay:0ms]"></div>
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce [animation-delay:150ms]"></div>
                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce [animation-delay:300ms]"></div>
                          </div>
                          <span className="text-sm">–î—É–º–∞—é...</span>
                        </div>
                      ) : message.isTyping ? (
                        <TypewriterText 
                          text={message.text} 
                          speed={25}
                          onComplete={() => handleTypingComplete(message.id)}
                          onUpdate={scrollToBottom}
                        />
                      ) : (
                        message.text
                      )}
                    </div>
                    {!message.isLoading && !message.isTyping && (
                      <div className="text-xs text-gray-400 mt-2 opacity-70">
                        {message.timestamp.toLocaleTimeString('ru-RU', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </div>
                    )}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
        </div>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div className="flex-shrink-0">
          <div className="px-6 pb-6 space-y-4">
            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="flex flex-wrap gap-2 max-w-3xl mx-auto">
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-gray-700/50 backdrop-blur-sm border-gray-600/40 hover:bg-gray-600/50 text-gray-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => {
                  console.log('–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" –Ω–∞–∂–∞—Ç–∞. userId:', userId);
                  console.log('onProductSidebarChange:', onProductSidebarChange);
                  onProductSidebarChange?.(true);
                }}
              >
                <Plus size={16} />
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-gray-700/50 backdrop-blur-sm border-gray-600/40 hover:bg-gray-600/50 text-gray-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => setInputMessage('/products')}
              >
                <Package size={16} />
                –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-gray-700/50 backdrop-blur-sm border-gray-600/40 hover:bg-gray-600/50 text-gray-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => setInputMessage('—á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?')}
              >
                <ChefHat size={16} />
                –†–µ—Ü–µ–ø—Ç—ã
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-blue-700/50 backdrop-blur-sm border-blue-600/40 hover:bg-blue-600/50 text-blue-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => setInputMessage('–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π —Å–∫–ª–∞–¥ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}
              >
                <Brain size={16} />
                –ò–ò –ê–Ω–∞–ª–∏–∑
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-green-700/50 backdrop-blur-sm border-green-600/40 hover:bg-green-600/50 text-green-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => setInputMessage('/analytics')}
              >
                <BarChart3 size={16} />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-purple-700/50 backdrop-blur-sm border-purple-600/40 hover:bg-purple-600/50 text-purple-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={() => setInputMessage('–∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥?')}
              >
                <Search size={16} />
                –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
              </Button>
              <Button
                size="sm"
                variant="outline"
                className="gap-2 bg-gradient-to-r from-blue-700/50 to-purple-700/50 backdrop-blur-sm border-blue-600/40 hover:from-blue-600/50 hover:to-purple-600/50 text-blue-200 hover:text-white rounded-full"
                disabled={isLoading}
                onClick={showAIDemo}
              >
                <Brain size={16} />
                –î–µ–º–æ –ò–ò
              </Button>
            </div>

            <div className="relative max-w-3xl mx-auto">
              <textarea
                ref={textareaRef}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyDown={handleKeyPress}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                disabled={isLoading}
                rows={1}
                className="w-full min-h-[52px] max-h-32 resize-none bg-gray-700/50 border border-gray-600/50 text-gray-100 placeholder-gray-400 focus:bg-gray-700/70 focus:border-blue-500/50 transition-all duration-200 backdrop-blur-sm rounded-3xl pl-4 py-3 text-base leading-6 focus:outline-none overflow-hidden"
                style={{
                  paddingRight: isMultiline ? '16px' : '50px'
                }}
              />
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading}
                size="icon"
                className={`absolute transition-all duration-300 h-9 w-9 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-full shadow-lg hover:shadow-blue-500/25 flex items-center justify-center ${
                  isMultiline 
                    ? 'right-2 bottom-4' // –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - –≤ —É–≥–ª—É
                    : 'right-2 top-1/2 -translate-y-1/2 -mt-0.5' // –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - —Å–ø—Ä–∞–≤–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–¥–≤–∏–≥–æ–º –≤–≤–µ—Ä—Ö
                }`}
              >
                {isLoading ? (
                  <span className="animate-spin text-base">‚è≥</span>
                ) : (
                  <span className="text-base font-bold">‚Üë</span>
                )}
              </Button>
            </div>

            {!isConnected && (
              <div className="text-sm text-red-300 bg-red-900/20 backdrop-blur-sm p-4 rounded-xl border border-red-700/30 animate-in fade-in slide-in-from-bottom-1">
                ‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080.
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞ - —É–ª—å—Ç—Ä–∞ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è */}
      <div 
        className={`fixed top-0 right-0 h-screen bg-gray-900/95 backdrop-blur-sm border-l border-gray-800/30 transition-transform duration-200 ${
          showProductSidebar ? 'translate-x-0' : 'translate-x-full'
        }`}
        style={{ 
          width: `${sidebarWidth}px`,
          zIndex: 10
        }}
      >
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ - –Ω–µ–≤–∏–¥–∏–º—ã–π */}
        <div
          className="absolute top-0 left-0 w-1 h-full cursor-col-resize bg-transparent hover:bg-blue-500/20"
          onMouseDown={handleMouseDown}
        >
          <div className="absolute top-1/2 left-0 transform -translate-y-1/2 w-0.5 h-6 bg-gray-700 opacity-0 hover:opacity-100" />
        </div>
        
        <div className="h-full flex flex-col">
          <div className="px-4 py-3 border-b border-gray-800/20 flex items-center justify-between">
            <h3 className="text-sm text-gray-300 font-medium">–°–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
            <button
              onClick={() => onProductSidebarChange?.(false)}
              className="text-gray-500 hover:text-gray-300 w-6 h-6 flex items-center justify-center rounded text-sm hover:bg-gray-800/40"
            >
              ‚úï
            </button>
          </div>
          <div className="flex-1 overflow-auto">
            <ProductManager userId={userId} />
          </div>
        </div>
      </div>
    </div>
  );
}
